                Linux Commands 

$ man <command>  # show manual page for <command>
$ <command> --help 
$ which <command>
$ whoami 
$ whereis <command>
$ whatis <command>
$ date 
$ who 

/var/logs


$ htop || sudo apt install htop && htop

$ sudo apt update && sudo apt upgrsde



############# System Info #############
$ hostname 
$ uname -a   show kernel info 

$ cat /etc/os-release 
$ cat /proc/cpuinfo   # Cpu information
$ cat proc/meminfo    # Memory information
$ free           # Show memory and swap usage
$ free -h 
$ df             # Show the disk usage 
$ df -h 
$ du             # Show directory space usage
$ du -h 
$ uptime
______________________________________



########### File Management ###########

ls 
cd
popd
pushd
pwd
touch 
mdkir 
file 
mv 
cp 
tail
head
nano
rmdir 
rm
find 
tree 
chmod 
cat 
nano
vim
ln
unlink

$ ls # list files in directory 
$ ls -al # list all files 
$ cd <directory>
$ cd .. 
$ pwd # print current directory

$ touch <file>  # creating empty file

$ touch file{1,,10} 

$ echo "<content>" > filename.txt    # creating a file with content 
$ echo "<content>" >> filename.txt   # appending to a file 

$ mkdir <dir_name>  # creating directory 
$ mv <file> <destination> 
$ mv <filename> <newfilename>  # renames file 

$ tail -n <file>  # last n lines of file 
$ head -n <file>  # first 10 lines of file 

$ cat <file>   # list all content of a file
$ cat > <file>  # places standard input to a file  
$ cat << EOF > <file>    # places all the input  until 'EOF' is received


$ nano <file>   # edit contents of a file
$ nano -l <file>   # display line number in file 

$ rmdir <directory>
$ rm <file>    # removes a file 
$ rm -rf <dir>     # removes contents of directories recursively
$ rm --dir <emptydir>   # removes empty directory

$ rm *.txt removes all text files 


$ file <file>   # determine type of file 
$ find . -type f -empty   # finding empty files in current directory
$ sudo find / -name "<name>" 

$ chmod <file_permissions> <file>
$ tree     # Lists the contents of a directory recursively

$ ln -s <file_link> <source>     # create a link
______________________________________



######### Output Handling #########

awk
grep
more 
less 
head 
tail

awk ‘{action}’ <file>
awk ‘/regex pattern/{action}’ <file>


$ awk ‘{print $0}’ <file>     # print all the contents of a file
$ awk ‘{print NR,$0}’ <file>  # line-number count
$ awk ‘{print $1}’ <file>     # print specific column
$ awk ‘{print $1, $4}’ <file> # print 2 columns
$ awk ‘{print $NF}’ <file>    # print last column

$ awk ‘{print $1}’ <file> | head -1 
# print specific line of a column
$ awk ‘/^O/’ <file> 
$ awk ‘!/0$/’ <file> 
$ awk ‘ /io/{print $0}’ <file>   # prints lines with 'io' 



grep <pattern> <file>


sed ‘ s/[ regex ]/[ replacement ]/[flags]'. <filename>

$ sed ‘s/cat/concatenate/g’ <file>   # replaces every word 'cat' with 'concatenate' 


$ sed ‘2,3s/cat/concatenate/’ <file>   # replace 2nd and 3rd 'cat' with 'concatenate' 

$ sed ‘3d’ <file>   # delete 3rd line 
______________________________________



########### Networking ############

ip
ifconfig 
netstat 
ping 
ssh 
nslookup
curl 
wget 
arp
route 

$ netstat -r       # display routing table 
$ netstat -l       # all listening ports 
$ netstat -tln     # display all listening TCP ports 
$ netstat -uln     # display all listening UDP ports 
$ netstat -plunt   # display all listening TCP and UDP process with processid 

$ ping <host> 
$ ping -c <number> <host>    # number of packets to send to the host
$ ping -s <number> -c <number> <host> # size of packets
$ ping -c <number> -q <host>   # only get the summary
$ ping -i <number> <host>   # default ping wait for 1 sec to send next packet change this time by using -i 
$ ping -f <host>   # ping flood 
$ ssh <user>@<host>
$ ssh -p <port> <user>@<host>

$ nslookup <host>

$ curl <url>        # display the content of the URL on the terminal
$ curl -# -O <url>

$ curl -o <output_file> <url>   # download file from the url 
$ curl -O <url>.     # saves it with the same name as in the <url>

$ curl -u <username>:<password> -T <file_to_upload> <ftp_url>     # upload a file to the FTP server

$ curl --data "param1=&param2=" <url>
$ curl -X "POST" -d "param1=John&param2=Doe" <url>

$ wget <url>
$ wget -O <file> <url>

$ ip -4 addr      # show ipv4 address 
$ ip -6 addr      # show ipv4 address 

$ ip address 
$ ip address | grep <interface>
$ ip address show <interface>    # show the information related to all interfaces available on our system

$ arp -a/-e

$ cat /etc/resolv.conf
$ cat /etc/hosts 
______________________________________



########## User Management ########## 

adduser 
useradd – lazy
deluser / userdel
passwd 
addgroup / groupadd
usermod 
groups 
groups –current user
gpasswd
groupadd
visudo – for changing group permissions 
delgroup / groupdel
groupmod
Users
Sudo

$ cat /etc/passwd     # this file has username and password 
$ cat /etc/shadow     # holds encrypted password of user accounts
$ cat /etc/group      # contains group info for all accounts
$ cat /etc/gshadow 

$ sudo adduser <usermame>     # create a new user 
$ sudo passwd <user>      # change password for <user>
$ su - <user>      # switches to <user>
$ su -             # switches to root, require root credentials 


$ sudo usermod -l <username> <newusername>  
# change <username> of the <user>
$ sudo usermod <username> --shell /bin/bash 

$ sudo useradd 

$ sudo groupadd <group_name>    # Removes a group from the system
$ sudo usermod -aG <group> <user>

$ groups 
$ groups <username>

$ sudo userdel <user>    # Deletes a user account and related file

$ gpasswd -d <username> <groupname>
______________________________________



######### Process Handling ##########

$ ps   
$ top 
$ ps -aux 
$ kill -l 
$ kill <processid>

$ fg       # Brings the most recent job to foreground
$ fg <n>   # Brings job <n> to the foreground

$ bg    # List stopped or background jobs,resume a stopped job in the background

$ jobs       # Lists all processes that are running in the background
______________________________________



####### Package Management #########

$ sudo apt edit-resources
$ sudo apt install <package>
$ sudo apt reinstall <package>
$ sudo apt remove <package>
$ sudo apt autoremove

$ suudo apt purge <package> # delete conf files as well
$ sudo apt install –only-upgrade <package>
$ sudo apt update      # update apt repo sources 
$ sudo apt upgrade     # upgrade all package, install new versions 
$ sudo apt dist-upgrade <package>
$ sudo apt list –installed/--upgradable
$ sudo apt show <packagename>
$ sudo apt search <string> 
$ sudo apt search –full <string>
$ sudo apt-cache search <package>
$ sudo apt-add-repository <repository>
______________________________________



######### Service Handling ##########

$ cat etc/services 
lib/systemd # systemctl
etc/init.d # service

$ systemctl status <servicename>
$ systemctl start <servicename>
$ systemctl stop <servicename>
$ systemctl restart <servicename>
$ systemctl enable <servicename>
$ systemctl disable <servicename>
$ systemctl is-active <servicename>
$ systemctl is-enabled <servicename>
______________________________________



####### Firewall ###########

ufw 
etc/default/ufw

$ sudo apt install ufw
$ systemctl status/enable ufw

$ ufw status 
$ ufw status numbered 
$ ufw delete <number>
$ ufw enable / disable
$ ufw reset
$ ufw allow/deny http/tcp or 80
$ ufw allow/deny ssh / https / ftp
$ ufw allow/deny from <ipaddress>
$ ufw allow from <ipaddress> to any port <portno>
$ ufw allow from <ipaddress> to any port <portno> proto <protocol>
$ ufw allow from <ipaddress> to any port 22 proto tcp
$ ufw default allow outgoing
$ ufw default deny incoming
$ sudo ufw delete <Action> <To>
$ sudo ufw delete allow 80
______________________________________



####### Compression/Decompression ######

tar 
gzip -> gzip command compresses files
unzip


$ gzip <file>   # create a compressed file named <file>.gz 
$ gzip -k <file>   # by default gzip deletes original file but -k keeps the original file as well 
$ gzip -1 <file>  # sets compression level between 1-9, -1 -> least compression  and -9 -> max compression
$ gzip -d <file>.gz  # Decompression


.tar - archive files are usually not compressed.
.tar.gz – archive file compressed with gzip tool
.tar.bz2 – archive file compressed with bzip2 tool


$ tar -cvf file.tar <multiple_files>  
# uncompressed tar Archive 
$ tar -cvf file.tar <folder>  # uncompressed tar Archive
$ tar -xvf file.tar  # Extracting files from Archive


$ tar -czvf file.tar.gz <folder>   # gzip compression on the tar Archive
$ tar -xvzf file.tar.gz  # Extracting a gzip tar Archive *.tar.gz 


$ tar -rvf existing-archive-name.tar <folder>
# Add content to the existing archive 
 

$ tar czf file.tar | wc -c  # checking size of tar 
$ $ tar czf file1.tar.gz | wc -c   # checking size of tar.gz


$ tar -tf file.tar   # list the contents of tar 
______________________________________




$ nano -l ~/.bashrc
if [ -f ~/.bash_aliases ]; then
 . ~/.bash_aliases
fi
$ source ~/.bashrc   # reloading .bashrc file 

$ alias <aliasname>="<alias_content>"
Eg:- alias i="sudo apt install"
     alias u=”sudo apt update && sudo apt upgrade “

$ unalias <alias_name>    # delete aliases 




###### Environment Variables ########

USER   #  The currently logged-in user name.
HOME   # The path to the current user’s home directory.
SHELL  # The pathname of the current user’s shell.
PATH   # A list of directories that the shell searches for executable files.
PWD    # The path to your current working directory (PWD stands for “Print Working Directory”).
UID    # The current user’s unique identifier.


$ echo $<variable_name>  # display value of variables

$ echo $SHELL  # display value of SHELL variable 
$ echo $PATH  # display value of PATH variable

$ env   # prints all environment variables

$ export <var_name>=<var_value>
$ printenv $<variable_name>

$ source <file>
______________________________________
