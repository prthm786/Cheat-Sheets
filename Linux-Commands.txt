                Linux Commands 

####### Terminal Shortcuts #######

Ctrl + L -> Clears the terminal 
Ctrl + A -> Move to start of line 
Ctrl + E -> Move to end of line 
Ctrl + U -> deletes everything before the cursor 
Ctrl + K -> deletes everything after the cursor 
Ctrl + Shift + + -> Increase font size 
Ctrl + - -> Decrease font size 
Ctrl + R -> search
F11 -> Full screen mode 
Ctrl + C -> stops the execution of process
Ctrl + Z -> Backgrounds the process 
______________________________________


$ man <command>  # show manual page for <command>
$ <command> --help 
$ which <command>
$ whoami
$ whereis <command>
$ whatis <command>
$ date 
$ who 
$ history 
$ history -c     # clears history 
$ watch <command>
$ time <command> # returns the time the command took to run 
# reset 

$ ls /bin | grep <search>  # check for command binaries 


$ echo $?  # check if the last command was successful
$ !!  # runs the last command 

$ echo "<some_text>" # displays text on the screen
$ echo -e "<some_text>" # this option enable interpretation of escape sequences  



Running Multiple Commands 

$ <command1> ; <command2>
$ <command1> && <command2> # runs second command only if first command is successful 
$ <command1> || <command2> # runs second command if first command fails


$ Eg:- bat <file> || sudo apt install bat && bat <file> # using logical operstors to run command on conditions 


############# System Info #############
$ hostname 
$ uname -a   show kernel info 

$ cat /etc/os-release 
$ cat /proc/cpuinfo  # Cpu information
$ cat proc/meminfo   # Memory information
$ free    # Show memory and swap usage
$ free -h 

$ df      # Show the disk usage 
$ df -h 

$ du      # Show directory space usage
$ du -h 
$ uptime 
$ uptime | awk '{print $3}'

$ lsblk # list block devices 

$ lspci # list peripheral devices linke sound cards, graphic cards etc 

$ lsusb 
$ lscpu

$ sudo lshw  # provide all the hardware related info
$ sudo lshw -html >> report.html # export all the info in html file 
$ sudo lshw -short

$ aplay -l   
______________________________________



########### File Management ###########

ls 
cd
popd
pushd
pwd
touch 
mdkir 
file 
mv 
cp 
tail
head
nano
rmdir 
rm
find 
tree 
chmod 
cat 
nano
vim
ln
unlink


Redirection/Data Streams

1> or >   # redirecting stdout to a file 
>>
2>        # redirecting stderr 

Eg:-  find /etc -type f 1> ~/results.txt 2> ~/errors.txt



$ ls            # list files in directory 
$ ls -al        # list all files 
$ cd <directory>
$ cd ..   # cd into the parent directory 
$ cd -    # cd into the previous directory 
$ cd ~    # cd into the current user's home directory
$ cd /    # cd into the root directory
$ pwd     # print current directory

$ pushd <directory>
$ popd 

$ touch <file>      # creating empty file
$ touch <file1> <file2> 
$ touch file{1..10} # creating 10 files

$ echo "<content>" > filename.txt   # creating a file with content 
$ echo "<content>" >> filename.txt  # appending to a file 

$ mkdir <dir_name>       # creating directory 

$ cp <file> <destination>/<file> # copies file into the destination

$ cp -r <source_path> <destination> # copies the entire folder or multiple files recursively 

$ mv <file> <destination> 
 
$ mv <filename> <newfilename> # renames file 

$ tail -n <file>   # last n lines of file 
$ tail -f <file>   # follows the file for updates 
$ head -n <file>   # first n lines of file 

$ cat <file>     # list all content of a file
$ cat > <file>   # places standard input to a file until Ctrl + C is pressed 

$ cat << EOF > <file>    # places all the input  until 'EOF' is received

$ cat -n <file>   # show line numbers 

$ cat <file1> <file2> > <newfile> # create a new file with content of both files <file1> and <file2> 

$ nano <file>        # edit contents of a file
$ nano -l <file>     # display line number in file 
 
$ rmdir <directory>       # removing a <directory>
$ rm <file>               # removes a file 
$ rm -rf <dir>            # removes contents of directories recursively
$ rm --dir <emptydir>     # removes empty directory

$ rm *.txt                # removes all text files 


$ file <file>             # determine type of file 

$ find . -type f -empty   # finding empty files in current directory
$ find . -type d   # find directories
$ sudo find / -name "<name>" 
$ sudo find / -iname "<name>"


$ chmod <file_permissions> <file>   # changes file mod 
$ tree                     # Lists the contents of a directory recursively

$ ln <source> <file_link> $ creates a hard link 
$ ln -s <source> <file_link> # creates a soft link

$ truncate -s 0 <file>
______________________________________



######### Output Handling #########

awk
grep
more 
less 
head 
tail

awk ‘{action}’ <file>
awk ‘/regex pattern/{action}’ <file>


$ awk ‘{print $0}’ <file>     # print all the contents of a file
$ awk ‘{print NR,$0}’ <file>  # line-number count
$ awk ‘{print $1}’ <file>     # print specific column
$ awk ‘{print $1, $4}’ <file> # print 2 columns
$ awk ‘{print $NF}’ <file>    # print last column

$ awk ‘{print $1}’ <file> | head -1 
# print specific line of a column
$ awk ‘/^O/’ <file> 
$ awk ‘!/0$/’ <file> 
$ awk ‘ /io/{print $0}’ <file>   # prints lines with 'io' 


grep <pattern> <file>


sed ‘ s/[ regex ]/[ replacement ]/[flags]'. <filename>


$ sed ‘s/cat/concatenate/g’ <file>   # replaces every word 'cat' with 'concatenate' 

$ sed ‘2,3s/cat/concatenate/’ <file>   # replace 2nd and 3rd 'cat' with 'concatenate' 

$ sed ‘3d’ <file>   # delete 3rd line 
______________________________________



########### Networking ############

ip
ifconfig 
netstat 
ping 
ssh 
nslookup
curl 
wget 
arp
route 

$ netstat -r       # display routing table 
$ netstat -l       # all listening ports 
$ netstat -tln     # display all listening TCP ports 
$ netstat -uln     # display all listening UDP ports 
$ netstat -plunt   # display all listening TCP and UDP process with processid 


$ ping <host> 
$ ping -c <number> <host>    # number of packets to send to the host
$ ping -s <number> -c <number> <host> 
# size of packets

$ ping -c <number> -q <host>   # only get the summary
$ ping -i <number> <host>   # default ping wait for 1 sec to send next packet change this time by using -i 
$ ping -f <host>   # ping flood 


$ nslookup <host>


$ curl <url>           # display the content of the URL on the terminal
$ curl -# -O <url>

$ curl -o <output_file> <url>   # download file from the url 
$ curl -O <url>                 # saves it with the same name as in the <url>

$ curl -u <username>:<password> -T <file_to_upload> <ftp_url>      # upload a file to the FTP server

$ curl --data "param1=&param2=" <url>
$ curl -X "POST" -d "param1=John&param2=Doe" <url>

$ wget <url>
$ wget -O <file> <url>


$ ip -4 addr      # show ipv4 address 
$ ip -6 addr      # show ipv4 address 

$ ip address 
$ ip address | grep <interface>
$ ip address show <interface>    
# show the information related to all interfaces available on our system

$ arp -a/-e

$ cat /etc/resolv.conf
$ cat /etc/hosts 
______________________________________



########## User Management ########## 

adduser 
useradd  # lazy way of creating user 
deluser/userdel
passwd 
addgroup/groupadd
usermod 
groups 
groups –current user
gpasswd
groupadd
visudo # for changing group permissions 
delgroup/groupdel
groupmod
users
sudo

$ cat /etc/passwd     # this file has username and password 
$ cat /etc/shadow     # holds encrypted password of user accounts
$ cat /etc/group      # contains group info for all accounts
$ cat /etc/gshadow 

$ sudo adduser <usermame>  # create a new user 
$ sudo useradd <username> # lazy way of creating user 
$ sudo useradd <username> -m # createa new user and adds home directory for the user 


$ sudo passwd <user>  # change password for <user>
$ sudo passwd  # change password for current user 

$ su - <user>   # switches to <user>
$ su -          # switches to root, require root credentials 


$ sudo usermod -l <username> <newusername>  # change <username> of the <user>
$ sudo usermod <username> --shell /bin/bash 


$ sudo groupadd <group_name> # Removes a group from the system

$ sudo usermod -aG <group> <user> # add user to the group 
$ sudo usermod -aG sudo <user> 

$ groups 
$ groups <username>

$ sudo userdel <user> # Deletes a user account and related file

$ gpasswd -d <username> <groupname>

$ sudo visudo 
______________________________________



######### Process Handling #########

$ ps   
$ top 
$ ps -aux 
$ kill -l 
$ kill <processid> 
$ kill <processname>
$ killall <processname>

# Use ctrl + Z to make a process a background job 

$ <command> &   # runs the command in background 

$ fg        # Brings the most recent job to foreground
$ fg <n>    # Brings job <n> to the foreground

$ bg    # List stopped or background jobs,resume a stopped job in the background

$ jobs       # Lists all processes that are running in the background

$ htop || sudo apt install htop && htop
# checks if htop is installed if not installs and runs it 
______________________________________



####### Package Management ########

APT Package Manager
$ sudo apt update && sudo apt upgrade
# updates the repositories and downloads all the updates 

$ sudo apt edit-resources
$ sudo apt install <package>
$ sudo apt reinstall <package>
$ sudo apt remove <package>
$ sudo apt autoremove

$ sudo apt purge <package> # delete conf files as well
$ sudo apt install –only-upgrade <package>

$ sudo apt update  # update apt repo sources 
$ sudo apt upgrade # upgrade all package, install new versions 

$ sudo apt dist-upgrade <package>
$ sudo apt list –installed # shows all installed packages
$ sudo apt list --installed | wc -l 
# list no of packages installed 

$ sudo apt list --upgradable
$ sudo apt show <package> # give details about the package

$ sudo apt search <string> 
$ sudo apt search –full <string>
 
$ sudo apt-cache search <package>
$ sudo apt-add-repository <repository>


Snap Package Manager
/snap/bin

$ sudo apt install snapd # install the snap package manager 

$ sudo snap install <package> # installs package 
$ sudo snap find <package> # searches for package
$ sudo snap info <package> # gives details about the package
$ sudo snap refresh # updates all the package 
$ sudo snap refresh <package> # only updates a single package 
$ sudo snap list # list of packages install using snap 
$ sudo snap enable/disable <package>
$ sudo snap remove <package> # removed the package from the system 
$ sudo snap remove <package> --purge
______________________________________



######### Service Handling #########

$ cat /etc/services 

lib/systemd     # systemctl
etc/init.d      # service

$ sudo systemctl status <servicename>
$ sudo systemctl start <servicename>
$ sudo systemctl stop <servicename>
$ sudo systemctl restart <servicename>
$ sudo systemctl enable/disable <servicename>
$ sudo systemctl reload <servicename>
$ sudo systemctl is-active <servicename>
$ sudo systemctl is-enabled <servicename>
$ sudo systemctl list-units --all 
$ sudo systemctl list-units --type=service 
______________________________________



########### Firewall ###########

ufw 
/etc/default/ufw

$ sudo apt install ufw  # installs ufw on the system 
$ sudo systemctl status/enable ufw

$ sudo ufw status 
$ sudo ufw status numbered 
$ sudo ufw delete <number>
$ sudo ufw enable/disable/reload 
$ sudo ufw allow/deny http/tcp or 80
$ sudo ufw allow/deny ssh/https/ftp

$ sudo ufw allow/deny from <ipaddress>
$ sudo ufw allow from <ipaddress> to any port <portno>
$ sudo ufw allow from <ipaddress> to any port <portno> proto <protocol>
$ sudo ufw allow from <ipaddress> to any port 22 proto tcp

$ sudo ufw default allow outgoing
$ sudo ufw default deny incoming
$ sudo ufw delete <Action> <To>
$ sudo ufw delete allow 80

$ sudo ufw app list
$ sudo ufw reset  # resets all the rules in ufw 
______________________________________



###### Compression/Decompression ######

tar 
gzip -> gzip command compresses file 
gunzip
zip and unzip 

Gzip and Gunzip

$ gzip <file>  # create a compressed file named <file>.gz 
$ gzip -k <file>  # by default gzip deletes original file but -k keeps the original file as well 
$ gzip -1 <file>  # sets compression level between 1-9, -1 -> least compression  and -9 -> max compression
$ gzip -d <file>.gz  # Decompression

$ gunzip <file>.gz # decompresses


.tar - archive files are usually not compressed.
.tar.gz – archive file compressed with gzip tool
.tar.bz2 – archive file compressed with bzip2 tool


Tar <options> <source> <destination>

-c	Create a new archive.
-z	Use gzip compression.
-v	Provide verbose output.
-f	Archive file name.
-x	Extract from a compressed file.
-A	Append tar files to an existing archive.
-d	Show differences between an archive and a local filesystem.
-delete	Delete from the archive.
-r	Append files to the end of an archive.
-t	List the contents of an archive.
-u	Append but don’t overwrite the current archive.


$ tar -cvf file.tar <multiple_files>  
# creating a tar Archive
$ tar -cvf file.tar <folder>  
# creating a tar Archive from folder

$ tar -tvf file.tar # list the contents of archive 
$ tar -tvf file.tar | wc -l # printing the no of files in tar archive 

$ tar -xvf file.tar 
# Extracting files from Archive


$ tar -czvf <file>.tar.gz <folder>   
# gzip compression on the tar Archive

$ tar -tvf <file>.tar.gz # listing the contents of tar.gz file

$ tar -xvzf <file>.tar.gz  
# Extracting a gzip tar Archive *.tar.gz 


$ tar -rvf existing-archive-name.tar <folder>
# Add content to the existing archive 
 

$ tar -czf file.tar | wc -c  # checking size of tar 
$ tar -czf file1.tar.gz | wc -c  # checking size of tar.gz


Zip and Unzip 

$ zip <file>.zip <files_to_be_zipped>
$ zip <file>.zip <folder>

$ unzip <file>.zip
$ unzip <file>.zip -d <destination_path>
______________________________________



########## Logs ##########

/var/log/
/var/log/auth.log 
/var/log/apt/ 

$ ls -al /var/log # logs are stored

$ sudo tail -f /var/log/auth.log 
$ sudo cat /var/log/auth.log | grep "<pattern>"

$ sudo tail -f /var/log/syslog

$ man last 
$ last # used to see the contents of /var/log/wtmp which contains info about last logged in users 
$ last -aF 

$ man lastb 
$ lastb # used to see the contents of /var/log/btmp which contains info about bad log in attempts
$ lastb -aF 

$ man lastlog
$ lastlog # used to see the last login of a user /var/log/lastlog
$ lastlog -u <user>
______________________________________




$ nano -l ~/.bashrc  # edit the bashrc file var/log/auth.log

if [ -f ~/.bash_aliases ]; then
 . ~/.bash_aliases
fi
$ source ~/.bashrc  # reloading .bashrc file 



##### Aliases #####

$ alias <aliasname>="<alias_content>"
Eg:- alias i="sudo apt install"
     alias upg=”sudo apt update && sudo apt upgrade “

$ unalias <alias_name>   
# delete aliases 




######## Environment Variables ########

USER   # The currently logged-in user name
HOME   # The path to the current user’s home directory
SHELL  # The pathname of the current user’s shell
PATH   # A list of directories that the shell searches for executable files
PWD    # The path to your current working directory
UID    # The current user’s unique identifier
RANDOM # prints a random number 

$ echo $<variable_name>  # display value of variables

$ echo $SHELL  # display value of SHELL variable 
$ echo $PATH  # display value of PATH variable

$ env   # prints all environment variables

$ export <var_name>=<var_value>
$ printenv $<variable_name>

$ source <file>
______________________________________

