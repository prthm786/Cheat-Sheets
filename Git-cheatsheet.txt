                 Git Commands 

$ git --version
$ git --help
$ git config --global user.name 
$ git config --global user.email 
$ git config --global --list
$ git config --global alias.<alias_name> "<cmd>"
Eg:- git config --global alias.am "commit -am"
       git ac "commit"

$ git init # initialize local git repo 
$ git add <file> # To add a single file toa staged area 
$ git add . or git add -A # To add everything at once to the staging area 


$ git commit -m "<msg>" # saves file in git and clears staging area 
$ git commit -am "<msg>" # shortcut, adds file and commit 
$ git commit --amend # combine staged changes with the previous commit, or edit the previous commit message without changing its snapshot
$ git commit --amend -m "<msg"  # change msg of last commit 
$ git commit --amend --no-edit # adding files to last commit / amends a commit without changing its commit message 
$ git commit --amend --author='Author Name <email@address.com>'  # Amend the author of a commit


$ git status # check status of a working tree 
$ git status -s 
$ git ls-files  


$ git clone <url> # clone repo into a new directory 
$ git clone <url> -b <branch_name> <path/to/directory> # clones a git repo from the address into the given directory and checkout's the given branch
$ git clone <url> -b <branch_name> --single-branch  # Clones only single branch


$ git branch or git branch --list
$ git branch <branchname> # Creating a new branch
$ git branch -d <branchname> # Deleting a branch
$ git branch -m <newbranchname> # change name of branch 
$ git checkout <branchname> # Switching to <branchname>
$ git checkout -b <branchname> # creates a new branch and Switches to new branch
$ git branch -a  # List all local and remote branches


$ git log # list of commits / show history of commits 
$ git log -- oneline # list of commits in single line 
$ git log --oneline --reverse 
$ git show <commit_hash>
$ git show HEAD~1


$ git revert <commit_hash> # undo the given commit, but will create a new commit without deleting the older one, safer than git reset 
$ git revert HEAD --no-edit # revert to the latest commit 


$ git reset <file> # unstage file
$ git reset --hard # discards away all your uncommitted changes, hard reset files to HEAD
$ git reset <commit_hash> # reset our repository back to the specific commit 


$ git remote -v
$ git remote add <remote> <url>
$ git push <remote> <branchname> #  uploading your commits to the remote repository


$ git rm <file> # removes <file> both from git and file system
$ git rm --cached file.txt # only removes <file> from git index(staging area)

$ git merge <branchname> # merge the specified branch with current branch 

$ git pull <url> # get updates from the remote repo.  # git fetch + git merge

 
$ git fetch <remote> # fetch all of the branches from the repository,  also downloads all of the required commits and files from the other repository.
$ git fetch <remote> <branch>
$ git fetch --all

git clone vs git fetch 
git clone makes a full copy of the remote repository on your local machine, whereas git fetch only retrieves the changes, leaving your local branches unchanged.

git fetch vs git pull 
git fetch just "downloads" the changes from the remote to your local repository. git pull downloads the changes and merges them into your current branch.

git clone vs git pull
git clone is how you get a local copy of an existing repository to work on. It's usually only used once for a given repository, unless you want to have multiple working copies of it around. (Or want to get a clean copy after messing up your local one...)
git pull (or git fetch + git merge) is how you update that local copy with new commits from the remote repository. If you are collaborating with others, it is a command that you will run frequently.


$ git stash  # stashes the staged and unstaged changes, clears staging area 
$ git stash -u  # stash everything including new untracked files
$ git stash save "<msg>"  # stash with a msg
git stash list  # list all stashes
$ git stash pop  # delete the recent stash and applies it
$ git stash pop stash@{2} # delete the {2} stash and applies it
$ git stash show   # shows the description of stash
$ git stash apply  # keep the stash and applies it to the git
$ git stash branch my-branch stash@{1} # creates a branch from your stash
$ git stash drop stash@{1}   # deletes the {1} stash
$ git stash clear  # clears all the stash


$ git diff
$ git diff --staged # difference between the staging area and the latest change 

.gitignore # adds file you want git to don't track 
