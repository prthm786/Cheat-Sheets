           Docker Commands Cheat Sheet 

$ docker --version 
$ docker --help

# Pull an image from docker hub 
$ docker pull <image_name>   

# List running containers 
$ docker ps 
$ docker ps -a

# Create a container 
$ docker run --name <container> <image>   
 
# Create a container to run it as a daemon(in background)
$ docker run -dt --name <container> <image>    

# Interact with the container, run cmds inside a container 
$ docker exec -it <container> bash

# Run a container and publishing a port 
$ docker run -td -p <host_port>:<container_port> <image> 

# Run a container interactively and remove after exiting 
$ docker container run --rm -it <image> 


$ docker container inspect <container>

# Checks logs of container 
$ docker container logs  <container>

$ docker start <container>
$ docker stop <container>
$ docker rm <container>


# Create an image(custom image) from the container
$ docker commit <container_hash> <img_name>:<version>


# Copy Files from container to local machine 
$ docker cp <container_hash>:<source> <target>

# Copy Files to container from local machine
$ docker cp <source> <container_hash>:<target>


# Remove running container 
$ docker rm -f <container>   
$ docker stats 


############ Images #############
# List of docker image 
$ docker images or docker image ls 

# Removes image 
$ docker image rm <image_name>

# Removes all unused images 
$ docker image prune 

# Saves image into a tar archive 
$ docker image save <image_name> -o <file>
or
$ docker save <image_name> -o <file>

# Loads images from tar archive 
$ docker image load -i <file>
or 
$ docker load -i <file> 

# Get information about an image 
$ docker image inspect <image_name>
__________________________________


############## NETWORKING ###############
# Network Types
## Bridge 
## User defined Bridge 
## Host 
## Macvlan
## IPvlan
## None 

$ docker network --help 

# List of network 
$ docker network ls     

# Create a new user defined Bridge network  
$ docker network create <networkname>     

# Removes network 
$ docker network rm <networkname>

# Removes unused networks 
$ docker network prune 

# Inspecting network 
$ docker inspect <networkname> 

# Attaching a container to a network 
$ docker network connect <network> <container>

# Removing a container from a network 
$ docker network disconnect <network> <container>


# Create a new container with a specified user defined bridge network 
$ docker run -itd --rm --network <network> --name <container> <image>    


# Creating a container in host network 
$ docker run -itd --rm --network host --name <container> nginx   


# Creating a Macvlan network 
$ docker network create -d macvlan --subnet <your_subnet> --gatwway <your_gateway> -o parent=<your_host_interface> <networkname>

# Creating a container in macvlan network 
$ docker run -itd --rm --network <macvlan_network> --ip <ip_address>--name <container> <image>   


# Creating a IPvlan network 
$ docker network create -d ipvlan --subnet <your_subnet> --gatwway <your_gateway> -o parent=<your_host_interface> <networkname>

# Creating a container in ipvlan network 
$ docker run -itd --rm --network <ipvlan_network> --ip <ip_address>--name <container> <image>


Creating a container in none network 
$ docker run -itd --rm --network none --name <container> <image> 


# Remove a container from a network
$ docker network disconnect bridge <container>
__________________________________


############ Volumes ##############

For persistent storage
/var/lib/docker/volumes

$ docker volume --help

# Creating a volume 
$ docker volume create <vol_name>

# Listing of Volumes
$ docker volume ls

# Get information about a volume 
$ docker volume inspect <vol_name>

# Remove a volume 
$ docker volume rm <vol_name>

# remove all unused volumes 
$ docker volume prune 

$ docker run -d \
  --name devtest \
  -v myvol2:/app \
  nginx:latest
__________________________________


############### Dockerfile ####################
$ touch index.html
<html>
 <body>
  <div> Hello World </div>
 </body>
</html>

# Create a Dockerfile
$ nano Dockerfile
FROM nginx
ADD index.html /usr/share/nginx/html


# Build the image with the tag 'myapp' using Dockerfile
$ docker build -t myapp .

$ docker build -t <image_repo>:<image_tag>

# Create a container using the image build 
$ docker run -d -p 9000:80 myapp


# check for the nginx app page 
$ curl localhost:9000




# Loging in to docker hub 
$ docker login 

$ docker image push <image_repo>:<image_tag>
