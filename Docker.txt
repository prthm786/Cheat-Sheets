           Docker Commands Cheat Sheet 

$ docker --version 
$ docker --help

# Shows docker disk usage 
$ docker system df 
 
$ docker system info 
or 
$ docker info 

$ docker system prune 


Search image on docker hub 
$ docker search <search_term> --no-trunc
$ docker search <search_term> --limit <no> 
$ docker search <search_term> --filter stars=<no>


# Pull an image from docker hub 
$ docker pull <image_name>   

# List running containers 
$ docker ps --no-trunc
# List of all containers both stopped and running 
$ docker ps -a 
$ docker ps --size 


# Create and run a container 
$ docker run --name <container> <image>   
 
# Create a container to run it as a daemon(in background) [Detached Mode]
$ docker run -dt --name <container> <image>    


# Interact with the container, run cmds inside a container 
$ docker exec -it <container> <command> <arg>
$ docker exec -it --privileged <container> <command> 

$ docker exec -it -w <working_dir> <container> <command> <arg>

# Get a bash shell of the container 
$ docker exec -it <container> bash 
or 
$ docker attach <container>
or 
$ docker container attach <container>


# Run a container and publishing a port 
$ docker run -td -p <host_port>:<container_port> <image> 

# Run a container interactively and remove after exiting 
$ docker container run --rm -it <image> 


# Get information about the container
$ docker container inspect <container>

# Show running processes inside container 
$ docker top <container>

# Show port mapping of a container 
$ docker port <container>

# Checks logs of container 
$ docker logs <container>
$ docker logs --details <container>
$ docker logs -f <container>  # follow logs 
$ docker logs -n <no> <container> # no of lines to show from the end 

$ docker start <container>
$ docker stop <container>
$ docker restart <container>

# Create an new image(custom image) from the container 
$ docker commit <container_hash> <img_name>:<version>


# Copy Files from container to local machine 
$ docker cp <container_hash>:<source> <local_path_dest>

# Copy Files to container from local machine
$ docker cp <local_path_src> <container_hash>:<target>


# Removes Stopped Container
$ docker rm <container>

# Remove running container 
$ docker rm -f <container>  

# Removes all anonymous volumes with the container 
$ docker rm -v <container>


# Renames container 
$ docker rename <container_name> <new_container_name>

# Removes all stopped containers 
$ docker container prune 

$ docker stats --no-trunc 
$ docker stats -a --no-trunc


############ Images ############

# Downloads an image from remote registry 
$ docker pull <image>

# List of docker image 
$ docker images or docker image ls 

# Removes image 
$ docker image rm <image_name> -f
or 
$ docker rmi <image> -f 

# Removes all unused images 
$ docker image prune 
$ docker image prune -f 

# Saves image into a tar archive 
$ docker image save <image_name> -o <file>.tar 
or
$ docker save <image_name> -o <file>.tar

Compress the image tar using gzip
$ docker save <image_name> | gzip > <file>.tar.gz

# Loads image from tar archive 
$ docker image load -i <file>.tar
or 
$ docker load -i <file>.tar

Load the image from the compressed tar archive 
$ docker load < <file>.tar.gz

# Get information about an image 
$ docker image inspect <image_name>
__________________________________



############## NETWORKING ##############
# Network Types
## Bridge 
## User defined Bridge 
## Host 
## Macvlan
## IPvlan
## None 

$ docker network --help 

# List of network 
$ docker network ls     

# Create a new user defined Bridge network  
$ docker network create <networkname>     

# Removes network 
$ docker network rm <networkname>

# Removes unused networks 
$ docker network prune 

# Inspecting network 
$ docker inspect <networkname> 

# Attaching a container to a network 
$ docker network connect <network> <container>

# Removing a container from a network 
$ docker network disconnect <network> <container>


# Create a new container with a specified user defined bridge network 
$ docker run -itd --rm --network <network> --name <container> <image>    


# Creating a container in host network 
$ docker run -itd --rm --network host --name <container> nginx   


# Creating a Macvlan network 
$ docker network create -d macvlan --subnet <your_subnet> --gatwway <your_gateway> -o parent=<your_host_interface> <networkname>

# Creating a container in macvlan network 
$ docker run -itd --rm --network <macvlan_network> --ip <ip_address>--name <container> <image>   


# Creating a IPvlan network 
$ docker network create -d ipvlan --subnet <your_subnet> --gatwway <your_gateway> -o parent=<your_host_interface> <networkname>

# Creating a container in ipvlan network 
$ docker run -itd --rm --network <ipvlan_network> --ip <ip_address>--name <container> <image>


Creating a container in none network 
$ docker run -itd --rm --network none --name <container> <image> 


# Remove a container from a network
$ docker network disconnect bridge <container>
__________________________________



############ Volumes ##############

For persistent storage
/var/lib/docker/volumes

$ docker volume --help

# Creating a volume 
$ docker volume create <vol_name>

# Listing of Volumes
$ docker volume ls

# Get information about a volume 
$ docker volume inspect <vol_name>

# Remove a volume 
$ docker volume rm <vol_name> -f 

# remove all unused volumes 
$ docker volume prune -f 

$ docker run -d \
  --name devtest \
  -v myvol2:/app \
  nginx:latest
__________________________________



############### Dockerfile ###############
$ touch index.html
<html>
 <body>
  <div> Hello World </div>
 </body>
</html>

# Create a Dockerfile
$ nano Dockerfile
FROM nginx
ADD index.html /usr/share/nginx/html


# Build the image with the tag 'myapp' using Dockerfile
$ docker build -t myapp .

$ docker build -t <image_repo>:<image_tag>

# Create a container using the image build 
$ docker run -d -p 9000:80 myapp


# check for the nginx app page 
$ curl localhost:9000




# Loging in to docker hub 
$ docker login 

$ docker image push <image_repo>:<image_tag>
