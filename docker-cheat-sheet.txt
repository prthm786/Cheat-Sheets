           Docker Commands Cheat Sheet 

$ docker --version 
$ docker --help

# Pull an image from docker hub 
$ docker pull <image>   

# List running containers 
$ docker ps 
$ docker ps -a

# Create a container 
$ docker run --name <container> <image>   
 
# Create a container to run it as a daemon(in background)
$ docker run -dt --name <container> <image>    

# Interact with the container, run cmds inside a container 
$ docker exec -it <container> bash

# Run a container and publishing a port 
$ docker run -td -p <host_port>:<container_port> <image> 

# Run a container interactively and remove after exiting 
$ docker container run --rm -it <image> 


# Checks logs of container 
$ docker logs <container>

$ docker start <container>
$ docker stop <container>
$ docker rm <container>


# Create an image(custom image) from the container
$ docker commit <container_hash> <img_name>:<version>


# Copy Files from container to local machine 
$ docker cp <container_hash>:<source> <target>

# Copy Files to container from local machine
$ docker cp <target> <container_hash>:<source>


# Remove running container 
$ docker rm -f <container>   
$ docker stats 

# List of docker image 
$ docker image ls 

# Removes image 
$ docker image rm <image_hash> 

_______________________________________________
################# NETWORKING ##################
# Network Types
## Bridge 
## User defined Bridge 
## Host 
## Macvlan
## IPvlan
## None 

$ docker network --help 

# List of network 
$ docker network ls     

# Create a new user defined Bridge network  
$ docker network create <networkname>     

# Inspecting network 
$ docker inspect <networkname> 


# Create a new container with a specified user defined bridge network 
$ docker run -itd --rm --network <network> --name <container> <image>    


# Creating a container in host network 
$ docker run -itd --rm --network host --name <container> nginx   


# Creating a Macvlan network 
$ docker network create -d macvlan --subnet <your_subnet> --gatwway <your_gateway> -o parent=<your_host_interface> <networkname>

# Creating a container in macvlan network 
$ docker run -itd --rm --network <macvlan_network> --ip <ip_address>--name <container> <image>   


# Creating a IPvlan network 
$ docker network create -d ipvlan --subnet <your_subnet> --gatwway <your_gateway> -o parent=<your_host_interface> <networkname>

# Creating a container in ipvlan network 
$ docker run -itd --rm --network <ipvlan_network> --ip <ip_address>--name <container> <image>


Creating a container in none network 
$ docker run -itd --rm --network none --name <container> <image> 


# Remove a container from a network
$ docker network disconnect bridge <container>
____________________________________________

